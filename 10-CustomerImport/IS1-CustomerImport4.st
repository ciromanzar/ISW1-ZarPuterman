Object subclass: #Address	instanceVariableNames: 'id streetName streetNumber town zipCode province'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:08'!province: aProvince 	province := aProvince	! !!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:11'!province	^province! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetNumber: aStreetNumber 	streetNumber := aStreetNumber ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetNumber	^streetNumber ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetName: aStreetName 	streetName := aStreetName ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetName	^streetName ! !!Address methodsFor: 'testing' stamp: 'HernanWilkinson 11/1/2016 10:06'!isAt: aStreetName	^streetName = aStreetName ! !!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:07'!town: aTown 	town := aTown! !!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:12'!town	^town! !!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:08'!zipCode: aZipCode 	zipCode := aZipCode! !!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:13'!zipCode	^zipCode! !Object subclass: #CSVImporter	instanceVariableNames: 'line readStream record system recordTypes'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!CSVImporter methodsFor: 'error signal' stamp: 'HernanWilkinson 11/1/2016 18:01'!signalInvalidAddressRecord 		self error: self class invalidAddressRecordErrorDescription ! !!CSVImporter methodsFor: 'error signal' stamp: 'HernanWilkinson 11/2/2016 10:52'!signalInvalidCustomerRecord 		self error: self class invalidCustomerRecordErrorDescription ! !!CSVImporter methodsFor: 'error signal' stamp: 'HernanWilkinson 11/1/2016 17:54'!signalInvalidRecordType	self error: self class invalidRecordTypeErrorDescription! !!CSVImporter methodsFor: 'importing - private - address' stamp: 'HernanWilkinson 11/2/2016 10:57'!assertValidAddressRecordSize		record size ~= 6 ifTrue: [ self signalInvalidAddressRecord ].	! !!CSVImporter methodsFor: 'importing - private - address' stamp: 'HernanWilkinson 11/2/2016 10:55'!isAddressRecord	^ record first = 'A'! !!CSVImporter methodsFor: 'initialization' stamp: 'lukskpoaguanteboca 6/28/2018 19:56'!initializeOn: aReadStream using: aCustomerSystem withRecords: aRecordTypeCollection 	readStream := aReadStream.	system := aCustomerSystem.	recordTypes := aRecordTypeCollection .! !!CSVImporter methodsFor: 'importing - private - customer' stamp: 'HernanWilkinson 11/2/2016 10:55'!isCustomerRecord	^ record first = 'C'! !!CSVImporter methodsFor: 'importing - private - customer' stamp: 'HernanWilkinson 11/2/2016 10:57'!assertValidCustomerRecordSize		record size ~= 5 ifTrue: [ self signalInvalidCustomerRecord ].	! !!CSVImporter methodsFor: 'importing - private' stamp: 'HernanWilkinson 11/2/2016 15:54'!convertLineToRecord	record := line substrings: {$,}.		self assertRecordNotEmpty! !!CSVImporter methodsFor: 'importing - private' stamp: 'HernanWilkinson 11/2/2016 10:55'!canImportNextLine	line := readStream nextLine.	^ line notNil! !!CSVImporter methodsFor: 'importing - private' stamp: 'lukskpoaguanteboca 6/28/2018 20:24'!importRecord	|recordIdentifier|	recordIdentifier := record first.	recordTypes detect: [ :recordType| recordType isIdentifiedBy: recordIdentifier  ]	ifFound:  [:recordType | recordType importOn: self]	ifNone: [ self signalInvalidRecordType ].! !!CSVImporter methodsFor: 'importing - private' stamp: 'HernanWilkinson 11/2/2016 15:55'!assertRecordNotEmpty		record isEmpty ifTrue: [ self signalInvalidRecordType ]! !!CSVImporter methodsFor: 'importing' stamp: 'HernanWilkinson 11/1/2016 17:51'!import	[ self canImportNextLine ] whileTrue: [ 		self convertLineToRecord.		self importRecord ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CSVImporter class	instanceVariableNames: ''!!CSVImporter class methodsFor: 'error descriptions' stamp: 'HernanWilkinson 11/1/2016 18:00'!invalidAddressRecordErrorDescription		^'Invalid address record'! !!CSVImporter class methodsFor: 'error descriptions' stamp: 'HernanWilkinson 11/2/2016 10:51'!invalidCustomerRecordErrorDescription		^'Invalid customer record'! !!CSVImporter class methodsFor: 'error descriptions' stamp: 'HernanWilkinson 11/1/2016 17:54'!invalidRecordTypeErrorDescription		^'Invalid record type'! !!CSVImporter class methodsFor: 'instance creation' stamp: 'lukskpoaguanteboca 6/28/2018 19:55'!from: aReadStream using: aCustomerSystem withRecords: aRecordTypeCollection	^ self new initializeOn: aReadStream using: aCustomerSystem withRecords: aRecordTypeCollection ! !TestCase subclass: #CustomerImportTest	instanceVariableNames: 'importer system'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!CustomerImportTest methodsFor: 'testing' stamp: 'lukskpoaguanteboca 6/28/2018 20:04'!testShouldNotImportAddressRecordsStartingWithMoreThanA	self 		should: [ self importCustomersFrom: self addressRecordStartingWithMoreThanOneATestData ]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidRecordTypeErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]	! !!CustomerImportTest methodsFor: 'testing' stamp: 'lukskpoaguanteboca 6/28/2018 20:04'!testEmptyLinesAreRecognizedAsInvalidRecords		self		should: [ self importCustomersFrom: self dataWithEmptyLine ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidRecordTypeErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'lukskpoaguanteboca 6/28/2018 21:00'!testCanNotImportAddressWithoutCustomer	self		should: [ self importCustomersFrom: self addressWithoutCustomerTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter addressWithoutCustomerErrorDescription.			self assert: system isEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'lukskpoaguanteboca 6/28/2018 21:00'!testShouldNotImportCustomerRecordsStartingWithMoreThanC	self		should: [ self				importCustomersFrom: self customerRecordStartingWithMoreThanOneCTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidRecordTypeErrorDescription.			self assert: system isEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'lukskpoaguanteboca 6/29/2018 02:14'!testImportCustomers	self importCustomersFrom: self validTestData.	self assertImportedCustomersSizeIsCorrect.	self assertPepeSanchezWasImportedCorrectly.	self assertJuanPerezWasImportedCorrectly.! !!CustomerImportTest methodsFor: 'testing' stamp: 'lukskpoaguanteboca 6/28/2018 20:04'!testCanNotImportAddressRecordWithLessThanSixFields		self		should: [ self importCustomersFrom: self addressRecordWithLessThanSixFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidAddressRecordErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'lukskpoaguanteboca 6/28/2018 20:04'!testCanNotImportAddressRecordWithMoreThanSixFields	self 		should: [ self importCustomersFrom: self addressRecordWithMoreThanSixFieldsTestData ]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidAddressRecordErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]	! !!CustomerImportTest methodsFor: 'testing' stamp: 'lukskpoaguanteboca 6/28/2018 21:00'!testCanNotImportCustomerRecordWithLessThanFiveFields	self		should: [ self				importCustomersFrom: self customerRecordWithLessThanFiveFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidCustomerRecordErrorDescription.			self assert: system isEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'lukskpoaguanteboca 6/28/2018 21:00'!testCanNotImportCustomerRecordWithMoreThanFiveFields	self		should: [ self				importCustomersFrom: self customerRecordWithMoreThanFiveFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidCustomerRecordErrorDescription.			self assert: system isEmpty ]! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'HernanWilkinson 11/2/2016 10:45'!addressRecordWithMoreThanSixFieldsTestData		^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636,BsAs,y otra cosa'! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'HernanWilkinson 11/1/2016 15:59'!addressWithoutCustomerTestData		^ ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'HernanWilkinson 11/2/2016 10:45'!addressRecordWithLessThanSixFieldsTestData		^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636'! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'HernanWilkinson 11/2/2016 10:45'!addressRecordStartingWithMoreThanOneATestData		^ ReadStream on: self alwaysImportedCustomerRecord,'AA,San Martin,3322,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'asserting' stamp: 'lukskpoaguanteboca 6/28/2018 21:00'!assertJuanPerezWasImportedCorrectly	| customer idType idNumber |	idType := 'C'.	idNumber := '23-25666777-9'.	customer := system identifiedAs: idType numbered: idNumber.	self		assert: customer		isNamed: 'Juan'		lastName: 'Perez'		identfiedAs: idType		withNumber: idNumber		andNumberOfAddresses: 1.	self		assert: customer		hasAddressAt: 'Alem'		number: 1122		in: 'CABA'		zipCode: 1001		province: 'CABA'! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/3/2016 09:10'!assertImportedCustomersSizeIsCorrect	self assert: system allCustomers size equals: 2! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 10:56'!assert: customer isNamed: firstName lastName: lastName identfiedAs: idType withNumber: idNumber andNumberOfAddresses: addressesSize	self assert: customer firstName equals: firstName.	self assert: customer lastName equals: lastName.	self assert: customer identificationType equals: idType.	self assert: customer identificationNumber equals: idNumber.	self assert: customer numberOfAddresses equals: addressesSize .! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/3/2016 09:20'!assertPepeSanchezWasImportedCorrectly	| customer |	customer := self alwaysImportedCustomer. 		self assert: customer isNamed: 'Pepe' lastName: 'Sanchez' identfiedAs: self alwaysImportedCustomerIdType withNumber: self alwaysImportedCustomerIdNumber andNumberOfAddresses: 2.	self assert: customer hasAddressAt: 'San Martin' number: 3322 in: 'Olivos' zipCode: 1636 province: 'BsAs'.	self assert: customer hasAddressAt: 'Maipu' number: 888 in: 'Florida' zipCode: 1122 province: 'Buenos Aires'! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 11:00'!assert: customer hasAddressAt: streetName number: streetNumber in: town zipCode: zipCode province: province	| address |		address := customer addressAt: streetName ifNone: [ self fail ].	self assert: address streetName equals: streetName.	self assert: address streetNumber equals: streetNumber.	self assert: address town equals: town.	self assert: address zipCode equals: zipCode.	self assert: address province equals: province.	! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'HernanWilkinson 11/4/2016 09:51'!setUp	system := Environment current createCustomerSystem.	system start.	system beginTransaction! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'HernanWilkinson 11/4/2016 09:52'!tearDown	system commit.	system shutdown! !!CustomerImportTest methodsFor: 'importing' stamp: 'lukskpoaguanteboca 6/28/2018 20:08'!importCustomersFrom: inputStream	|recordTypes|	recordTypes := OrderedCollection new.	recordTypes add: (CustomerRecord identifiedWith: 'C'). 	recordTypes add: (AddressRecord identifiedWith: 'A'). 	(CustomerImporter  from: inputStream using: system withRecords: recordTypes ) import! !!CustomerImportTest methodsFor: 'test data' stamp: 'HernanWilkinson 11/2/2016 15:52'!dataWithEmptyLine		^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'test data' stamp: 'HernanWilkinson 11/2/2016 10:46'!validTestData	^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos AiresC,Juan,Perez,C,23-25666777-9A,Alem,1122,CABA,1001,CABA'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'lukskpoaguanteboca 6/28/2018 21:00'!alwaysImportedCustomer	| anIdentificationNumber anIdentifycationType |	anIdentifycationType := self alwaysImportedCustomerIdType.	anIdentificationNumber := self alwaysImportedCustomerIdNumber.	^ system		identifiedAs: anIdentifycationType		numbered: anIdentificationNumber! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:47'!alwaysImportedCustomerIdNumber	^ '22333444'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:47'!alwaysImportedCustomerRecord	^ 'C,Pepe,Sanchez,', self alwaysImportedCustomerIdType, ',', self alwaysImportedCustomerIdNumber ! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/1/2016 17:48'!customerRecordStartingWithMoreThanOneCTestData		^ ReadStream on:'CC,Pepe,Sanchez,D,22333444'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:50'!customerRecordWithLessThanFiveFieldsTestData		^ ReadStream on: 'C,Pepe,Sanchez,D'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:53'!customerRecordWithMoreThanFiveFieldsTestData		^ ReadStream on: self alwaysImportedCustomerRecord,',x'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:46'!alwaysImportedCustomerIdType	^ 'D'! !CSVImporter subclass: #CustomerImporter	instanceVariableNames: 'newCustomer'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!CustomerImporter methodsFor: 'importing - private - address' stamp: 'lukskpoaguanteboca 6/28/2018 21:19'!importAddress	| newAddress |	self assertThereIsCustsomerForAddress.	self assertValidAddressRecordSize.		newAddress := Address new.	newAddress streetName: record second.	newAddress streetNumber: record third asInteger.	newAddress town: record fourth.	newAddress zipCode: record fifth asInteger.	newAddress province: record sixth.	^ newCustomer addAddress: newAddress! !!CustomerImporter methodsFor: 'importing - private - address' stamp: 'lukskpoaguanteboca 6/28/2018 21:19'!assertThereIsCustsomerForAddress	newCustomer isNil ifTrue: [ self signalAddressWithoutCustomerError ].	! !!CustomerImporter methodsFor: 'importing - private - customer' stamp: 'lukskpoaguanteboca 6/28/2018 21:19'!importCustomer	self assertValidCustomerRecordSize.	newCustomer := Customer new.	newCustomer firstName: record second.	newCustomer lastName: record third.	newCustomer identificationType: record fourth.	newCustomer identificationNumber: record fifth.	system add: newCustomer! !!CustomerImporter methodsFor: 'error signal' stamp: 'lukskpoaguanteboca 6/29/2018 01:55'!signalAddressWithoutCustomerError	self error: self class addressWithoutCustomerErrorDescription.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CustomerImporter class	instanceVariableNames: ''!!CustomerImporter class methodsFor: 'error descriptions' stamp: 'lukskpoaguanteboca 6/28/2018 20:05'!addressWithoutCustomerErrorDescription		^'There is no Customer for the imported address'! !Object subclass: #ERPSystem	instanceVariableNames: 'customerSystem supplierSystem'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!ERPSystem methodsFor: 'accessing' stamp: 'lukskpoaguanteboca 6/29/2018 01:17'!customerIdentifiedAs: anIdType numbered: anIdNumber	^ customerSystem identifiedAs: anIdType  numbered: anIdNumber  .! !!ERPSystem methodsFor: 'accessing' stamp: 'lukskpoaguanteboca 6/29/2018 01:05'!addSupplier: aSupplier	supplierSystem add: aSupplier.! !!ERPSystem methodsFor: 'accessing' stamp: 'lukskpoaguanteboca 6/29/2018 01:27'!add: aCustomer	^self addCustomer: aCustomer.! !!ERPSystem methodsFor: 'accessing' stamp: 'lukskpoaguanteboca 6/29/2018 01:01'!commit	self subclassResponsibility ! !!ERPSystem methodsFor: 'accessing' stamp: 'lukskpoaguanteboca 6/28/2018 21:38'!start	self subclassResponsibility ! !!ERPSystem methodsFor: 'accessing' stamp: 'lukskpoaguanteboca 6/28/2018 21:39'!beginTransaction	self subclassResponsibility ! !!ERPSystem methodsFor: 'accessing' stamp: 'lukskpoaguanteboca 6/29/2018 01:06'!addCustomer: aCustomer	customerSystem add: aCustomer.! !!ERPSystem methodsFor: 'accessing' stamp: 'lukskpoaguanteboca 6/29/2018 01:01'!shutdown	self subclassResponsibility ! !!ERPSystem methodsFor: 'accessing' stamp: 'lukskpoaguanteboca 6/29/2018 01:17'!supplierIdentifiedAs: anIdType numbered: anIdNumber	^ supplierSystem identifiedAs: anIdType  numbered: anIdNumber  .! !!ERPSystem methodsFor: 'accessing' stamp: 'lukskpoaguanteboca 6/29/2018 01:48'!allCustomers	^ customerSystem allCustomers.! !!ERPSystem methodsFor: 'accessing' stamp: 'lukskpoaguanteboca 6/29/2018 01:49'!allSuppliers	^ supplierSystem  allSuppliers .! !Object subclass: #Environment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Environment methodsFor: 'system creation' stamp: 'HernanWilkinson 11/4/2016 09:49'!createCustomerSystem	self subclassResponsibility ! !!Environment methodsFor: 'system creation' stamp: 'lukskpoaguanteboca 6/28/2018 21:36'!createSystem	self subclassResponsibility ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Environment class	instanceVariableNames: ''!!Environment class methodsFor: 'enviroment selection' stamp: 'HernanWilkinson 11/4/2016 09:46'!current		^self allSubclasses 		detect: [ :anEnvironemntClass | anEnvironemntClass isCurrent ]		ifFound: [ :anEnvironmentClass | anEnvironmentClass new ]		ifNone: [ self error: 'No environment detected' ]! !!Environment class methodsFor: 'enviroment selection' stamp: 'HernanWilkinson 11/4/2016 09:49'!isCurrent	self subclassResponsibility ! !Environment subclass: #DevelpmentEnvironment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!DevelpmentEnvironment methodsFor: 'as yet unclassified' stamp: 'HernanWilkinson 11/4/2016 09:47'!createCustomerSystem		^TransientCustomerSystem new! !!DevelpmentEnvironment methodsFor: 'system creation' stamp: 'lukskpoaguanteboca 6/29/2018 00:59'!createSystem		^TransientERPSystem new! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DevelpmentEnvironment class	instanceVariableNames: ''!!DevelpmentEnvironment class methodsFor: 'as yet unclassified' stamp: 'HernanWilkinson 11/4/2016 09:47'!isCurrent		^IntegrationEnvironment isCurrent not! !Environment subclass: #IntegrationEnvironment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!IntegrationEnvironment methodsFor: 'as yet unclassified' stamp: 'HernanWilkinson 11/4/2016 09:45'!createCustomerSystem		^PersistentCustomerSystem new! !!IntegrationEnvironment methodsFor: 'system creation' stamp: 'lukskpoaguanteboca 6/29/2018 00:59'!createSystem		^PersistentERPSystem new! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!IntegrationEnvironment class	instanceVariableNames: ''!!IntegrationEnvironment class methodsFor: 'as yet unclassified' stamp: 'HernanWilkinson 11/4/2016 09:46'!isCurrent		^false! !!IntegrationEnvironment class methodsFor: 'as yet unclassified' stamp: 'HernanWilkinson 11/4/2016 09:47'!not	self shouldBeImplemented.! !Object subclass: #Party	instanceVariableNames: 'identificationType identificationNumber addresses'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Party methodsFor: 'identification' stamp: 'lukskpoaguanteboca 6/29/2018 01:58'!identificationNumber		^identificationNumber ! !!Party methodsFor: 'identification' stamp: 'lukskpoaguanteboca 6/29/2018 01:58'!identificationNumber: anIdentificationNumber 	identificationNumber := anIdentificationNumber! !!Party methodsFor: 'identification' stamp: 'lukskpoaguanteboca 6/29/2018 01:58'!identificationType: anIdentificationType 	identificationType := anIdentificationType! !!Party methodsFor: 'identification' stamp: 'lukskpoaguanteboca 6/29/2018 01:58'!identificationType		^identificationType ! !!Party methodsFor: 'identification' stamp: 'lukskpoaguanteboca 6/29/2018 02:00'!isIdentifiedAs: anIdType numbered: anIdNumber 		^identificationType = anIdType and: [ identificationNumber = anIdNumber  ]! !!Party methodsFor: 'addresses' stamp: 'lukskpoaguanteboca 6/29/2018 01:58'!addAddress: anAddress 	addresses add: anAddress ! !!Party methodsFor: 'addresses' stamp: 'lukskpoaguanteboca 6/29/2018 01:58'!addresses	^ addresses! !!Party methodsFor: 'addresses' stamp: 'lukskpoaguanteboca 6/29/2018 02:01'!numberOfAddresses		^addresses size! !!Party methodsFor: 'addresses' stamp: 'lukskpoaguanteboca 6/29/2018 01:58'!addressAt: aStreetName ifNone: noneClosure 		^addresses detect: [ :anAddress | anAddress isAt: aStreetName ] ifNone: noneClosure ! !!Party methodsFor: 'addresses' stamp: 'lukskpoaguanteboca 6/29/2018 01:58'!addressesIsEmpty		^addresses isEmpty! !Party subclass: #Customer	instanceVariableNames: 'id firstName lastName'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Customer methodsFor: 'initialization' stamp: 'HernanWilkinson 10/28/2016 13:26'!initialize	super initialize.	addresses := OrderedCollection new.! !!Customer methodsFor: 'name' stamp: 'lukskpoaguanteboca 6/29/2018 02:00'!firstName		^firstName ! !!Customer methodsFor: 'name' stamp: 'lukskpoaguanteboca 6/29/2018 02:00'!firstName: aName 	firstName := aName! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!lastName: aLastName 	lastName := aLastName! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!lastName	^lastName ! !!Customer methodsFor: 'name' stamp: 'lukskpoaguanteboca 6/29/2018 02:05'!hasIdNumber: anIdNumber	^ identificationNumber = anIdNumber ! !ERPSystem subclass: #PersistentERPSystem	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!PersistentERPSystem methodsFor: 'initialization' stamp: 'lukskpoaguanteboca 6/29/2018 01:07'!initialize	supplierSystem := PersistentSupplierSystem   new.	customerSystem  := PersistentSupplierSystem  new.! !Object subclass: #Record	instanceVariableNames: 'identifier'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Record methodsFor: 'initialization' stamp: 'lukskpoaguanteboca 6/28/2018 20:09'!initializeWith: anIdentifier	identifier := anIdentifier.! !!Record methodsFor: 'initialization' stamp: 'lukskpoaguanteboca 6/28/2018 19:51'!isIdentifiedBy: anIdentifier	^ identifier = anIdentifier ! !!Record methodsFor: 'initialization' stamp: 'lukskpoaguanteboca 6/28/2018 20:10'!importOn: anImporter	self subclassResponsibility ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Record class	instanceVariableNames: ''!!Record class methodsFor: 'as yet unclassified' stamp: 'lukskpoaguanteboca 6/28/2018 20:09'!identifiedWith: anIdentifier	^self new initializeWith: anIdentifier.! !Record subclass: #AddressRecord	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!AddressRecord methodsFor: 'initialization' stamp: 'lukskpoaguanteboca 6/28/2018 20:10'!importOn: anImporter	^ anImporter importAddress.! !Record subclass: #CustomerRecord	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!CustomerRecord methodsFor: 'initialization' stamp: 'lukskpoaguanteboca 6/28/2018 20:10'!importOn: anImporter	^ anImporter importCustomer .! !Record subclass: #ExistingCustomerRecord	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!ExistingCustomerRecord methodsFor: 'initialization' stamp: 'lukskpoaguanteboca 6/28/2018 20:36'!importOn: anImporter	^ anImporter importExistingCustomer .! !Party subclass: #Supplier	instanceVariableNames: 'customers name'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Supplier methodsFor: 'initialization' stamp: 'lukskpoaguanteboca 6/29/2018 01:10'!initializeWithName: aName identifiedWith: anIdType as: anIdNumber 	name := aName.	identificationType := anIdType.	identificationNumber := anIdNumber.	customers := OrderedCollection new.	addresses := OrderedCollection new.! !!Supplier methodsFor: 'initialization' stamp: 'lukskpoaguanteboca 6/29/2018 02:02'!customers	^customers! !!Supplier methodsFor: 'initialization' stamp: 'lukskpoaguanteboca 6/29/2018 02:02'!addCustomer: aCustomer	customers add: aCustomer.! !!Supplier methodsFor: 'initialization' stamp: 'lukskpoaguanteboca 6/29/2018 02:01'!name	^name! !!Supplier methodsFor: 'initialization' stamp: 'lukskpoaguanteboca 6/29/2018 02:03'!customersIsEmpty	^customers isEmpty .! !!Supplier methodsFor: 'initialization' stamp: 'lukskpoaguanteboca 6/29/2018 02:05'!customerWithId: anIdNumber ifNone: noneClosure 		^customers detect: [ :aCustomer | aCustomer hasIdNumber: anIdNumber ] ifNone: noneClosure ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Supplier class	instanceVariableNames: ''!!Supplier class methodsFor: 'as yet unclassified' stamp: 'lukskpoaguanteboca 6/28/2018 21:33'!named: aName identifiedWith: anIdType as: anIdNumber 	^ self new initializeWithName: aName identifiedWith: anIdType as: anIdNumber ! !TestCase subclass: #SupplierImportTest	instanceVariableNames: 'importer system testCaseFactory'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!SupplierImportTest methodsFor: 'testing' stamp: 'lukskpoaguanteboca 6/28/2018 20:33'!testCanNotImportAddressRecordWithMoreThanSixFields	self 		should: [ self importSuppliersFrom: self addressRecordWithMoreThanSixFieldsTestData ]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidAddressRecordErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]	! !!SupplierImportTest methodsFor: 'testing' stamp: 'lukskpoaguanteboca 6/28/2018 21:00'!testShouldNotImportCustomerRecordsStartingWithMoreThanC	self		should: [ self				importSuppliersFrom: self customerRecordStartingWithMoreThanOneCTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidRecordTypeErrorDescription.			self assert: system isEmpty ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'lukskpoaguanteboca 6/29/2018 02:11'!testImportSuppliers	self importCustomersFrom: testCaseFactory validCustomerTestData.	self assertImportedCustomersSizeIsCorrect.		self importSuppliersFrom: testCaseFactory validSupplierTestData.		self assertImportedSuppliersSizeIsCorrect.	self assertImportedCustomersNewSizeIsCorrect.	self assertGeorgeCostanzaWasImportedCorrectly.	self assertVandalayIndustriesWasImportedCorrectly.	! !!SupplierImportTest methodsFor: 'testing' stamp: 'lukskpoaguanteboca 6/28/2018 20:33'!testEmptyLinesAreRecognizedAsInvalidRecords		self		should: [ self importSuppliersFrom: self dataWithEmptyLine ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidRecordTypeErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'lukskpoaguanteboca 6/28/2018 20:33'!testShouldNotImportAddressRecordsStartingWithMoreThanA	self 		should: [ self importSuppliersFrom: self addressRecordStartingWithMoreThanOneATestData ]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidRecordTypeErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]	! !!SupplierImportTest methodsFor: 'testing' stamp: 'lukskpoaguanteboca 6/28/2018 21:00'!testCanNotImportAddressWithoutCustomer	self		should: [ self importSuppliersFrom: self addressWithoutCustomerTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter addressWithoutCustomerErrorDescription.			self assert: system isEmpty ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'lukskpoaguanteboca 6/28/2018 20:33'!testCanNotImportAddressRecordWithLessThanSixFields		self		should: [ self importSuppliersFrom: self addressRecordWithLessThanSixFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidAddressRecordErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'lukskpoaguanteboca 6/28/2018 21:00'!testCanNotImportCustomerRecordWithMoreThanFiveFields	self		should: [ self				importSuppliersFrom: self customerRecordWithMoreThanFiveFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidCustomerRecordErrorDescription.			self assert: system isEmpty ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'lukskpoaguanteboca 6/28/2018 21:00'!testCanNotImportCustomerRecordWithLessThanFiveFields	self		should: [ self				importSuppliersFrom: self customerRecordWithLessThanFiveFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidCustomerRecordErrorDescription.			self assert: system isEmpty ]! !!SupplierImportTest methodsFor: 'test data - address' stamp: 'lukskpoaguanteboca 6/28/2018 20:16'!addressRecordStartingWithMoreThanOneATestData		^ ReadStream on: self alwaysImportedCustomerRecord,'AA,San Martin,3322,Olivos,1636,BsAs'! !!SupplierImportTest methodsFor: 'test data - address' stamp: 'lukskpoaguanteboca 6/28/2018 20:16'!addressWithoutCustomerTestData		^ ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs'! !!SupplierImportTest methodsFor: 'test data - address' stamp: 'lukskpoaguanteboca 6/28/2018 20:16'!addressRecordWithLessThanSixFieldsTestData		^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636'! !!SupplierImportTest methodsFor: 'test data - address' stamp: 'lukskpoaguanteboca 6/28/2018 20:16'!addressRecordWithMoreThanSixFieldsTestData		^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636,BsAs,y otra cosa'! !!SupplierImportTest methodsFor: 'test data - customer' stamp: 'lukskpoaguanteboca 6/29/2018 01:46'!customerImportedBySupplier	^ system		customerIdentifiedAs: testCaseFactory customerImportedBySupplierIdType 		numbered: testCaseFactory customerImportedBySupplierIdNumber ! !!SupplierImportTest methodsFor: 'test data - customer' stamp: 'lukskpoaguanteboca 6/29/2018 02:07'!alwaysImportedCustomer	^ system		customerIdentifiedAs: testCaseFactory customerImportedBySupplierIdType 		numbered: testCaseFactory customerImportedBySupplierIdNumber ! !!SupplierImportTest methodsFor: 'test data - customer' stamp: 'lukskpoaguanteboca 6/28/2018 20:16'!alwaysImportedCustomerIdNumber	^ '22333444'! !!SupplierImportTest methodsFor: 'test data - customer' stamp: 'lukskpoaguanteboca 6/29/2018 02:19'!alwaysImportedSupplier	^ system		supplierIdentifiedAs: testCaseFactory alwaysImportedSupplierIdType 		numbered: testCaseFactory alwaysImportedSupplierIdNumber ! !!SupplierImportTest methodsFor: 'test data - customer' stamp: 'lukskpoaguanteboca 6/28/2018 20:16'!customerRecordStartingWithMoreThanOneCTestData		^ ReadStream on:'CC,Pepe,Sanchez,D,22333444'! !!SupplierImportTest methodsFor: 'test data - customer' stamp: 'lukskpoaguanteboca 6/28/2018 20:16'!alwaysImportedCustomerRecord	^ 'C,Pepe,Sanchez,', self alwaysImportedCustomerIdType, ',', self alwaysImportedCustomerIdNumber ! !!SupplierImportTest methodsFor: 'test data - customer' stamp: 'lukskpoaguanteboca 6/28/2018 20:16'!customerRecordWithLessThanFiveFieldsTestData		^ ReadStream on: 'C,Pepe,Sanchez,D'! !!SupplierImportTest methodsFor: 'test data - customer' stamp: 'lukskpoaguanteboca 6/28/2018 20:16'!customerRecordWithMoreThanFiveFieldsTestData		^ ReadStream on: self alwaysImportedCustomerRecord,',x'! !!SupplierImportTest methodsFor: 'test data - customer' stamp: 'lukskpoaguanteboca 6/28/2018 20:16'!alwaysImportedCustomerIdType	^ 'D'! !!SupplierImportTest methodsFor: 'setup-teardown' stamp: 'lukskpoaguanteboca 6/28/2018 21:36'!setUp	testCaseFactory := TestCaseFactory new.	system := Environment current createSystem.	system start.	system beginTransaction! !!SupplierImportTest methodsFor: 'setup-teardown' stamp: 'lukskpoaguanteboca 6/28/2018 20:16'!tearDown	system commit.	system shutdown! !!SupplierImportTest methodsFor: 'test data' stamp: 'lukskpoaguanteboca 6/28/2018 20:16'!dataWithEmptyLine		^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636,BsAs'! !!SupplierImportTest methodsFor: 'test data' stamp: 'lukskpoaguanteboca 6/28/2018 20:16'!validTestData	^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos AiresC,Juan,Perez,C,23-25666777-9A,Alem,1122,CABA,1001,CABA'! !!SupplierImportTest methodsFor: 'asserting' stamp: 'lukskpoaguanteboca 6/28/2018 21:00'!assertJuanPerezWasImportedCorrectly	| customer idType idNumber |	idType := 'C'.	idNumber := '23-25666777-9'.	customer := system identifiedAs: idType numbered: idNumber.	self		assert: customer		isNamed: 'Juan'		lastName: 'Perez'		identfiedAs: idType		withNumber: idNumber		andNumberOfAddresses: 1.	self		assert: customer		hasAddressAt: 'Alem'		number: 1122		in: 'CABA'		zipCode: 1001		province: 'CABA'! !!SupplierImportTest methodsFor: 'asserting' stamp: 'lukskpoaguanteboca 6/29/2018 02:11'!assertImportedCustomersNewSizeIsCorrect	self assert: system allCustomers size equals: 3! !!SupplierImportTest methodsFor: 'asserting' stamp: 'lukskpoaguanteboca 6/29/2018 02:25'!assert: supplier hasCustomerNamed: firstName lastName: lastName identfiedAs: idType withNumber: idNumber	|customer|	customer := supplier customerWithId: idNumber ifNone: [ self error: 'invalid customer error'].	self assert: customer firstName equals: firstName.	self assert: customer lastName equals: lastName.	self assert: customer identificationType equals: idType.	self assert: customer identificationNumber equals: idNumber.! !!SupplierImportTest methodsFor: 'asserting' stamp: 'lukskpoaguanteboca 6/29/2018 02:20'!assertVandalayIndustriesWasImportedCorrectly	| supplier |	supplier  := self alwaysImportedSupplier. 		self assert: supplier hasCustomerNamed: 'Pepe' lastName: 'Sanchez' identfiedAs: testCaseFactory alwaysImportedCustomerIdType withNumber: testCaseFactory  alwaysImportedCustomerIdNumber.	self assert: supplier hasCustomerNamed: 'George' lastName: 'Costanza' identfiedAs: testCaseFactory customerImportedBySupplierIdType  withNumber: testCaseFactory  customerImportedBySupplierIdNumber.	self assert: supplier hasAddressAt: 'San Martin' number: 3322 in: 'Olivos' zipCode: 1636 province: 'BsAs'.	self assert: supplier hasAddressAt: 'Maipu' number: 888 in: 'Florida' zipCode: 1122 province: 'Buenos Aires'! !!SupplierImportTest methodsFor: 'asserting' stamp: 'lukskpoaguanteboca 6/28/2018 20:49'!assertImportedSuppliersSizeIsCorrect	self assert: system allSuppliers size equals: 1! !!SupplierImportTest methodsFor: 'asserting' stamp: 'lukskpoaguanteboca 6/28/2018 20:16'!assert: customer isNamed: firstName lastName: lastName identfiedAs: idType withNumber: idNumber andNumberOfAddresses: addressesSize	self assert: customer firstName equals: firstName.	self assert: customer lastName equals: lastName.	self assert: customer identificationType equals: idType.	self assert: customer identificationNumber equals: idNumber.	self assert: customer numberOfAddresses equals: addressesSize .! !!SupplierImportTest methodsFor: 'asserting' stamp: 'lukskpoaguanteboca 6/29/2018 02:08'!assertGeorgeCostanzaWasImportedCorrectly	| customer |	customer := self alwaysImportedCustomer. 		self assert: customer isNamed: 'George' lastName: 'Costanza' identfiedAs: testCaseFactory customerImportedBySupplierIdType  withNumber: testCaseFactory customerImportedBySupplierIdNumber andNumberOfAddresses: 0.! !!SupplierImportTest methodsFor: 'asserting' stamp: 'lukskpoaguanteboca 6/28/2018 20:16'!assertPepeSanchezWasImportedCorrectly	| customer |	customer := self alwaysImportedCustomer. 		self assert: customer isNamed: 'Pepe' lastName: 'Sanchez' identfiedAs: self alwaysImportedCustomerIdType withNumber: self alwaysImportedCustomerIdNumber andNumberOfAddresses: 2.	self assert: customer hasAddressAt: 'San Martin' number: 3322 in: 'Olivos' zipCode: 1636 province: 'BsAs'.	self assert: customer hasAddressAt: 'Maipu' number: 888 in: 'Florida' zipCode: 1122 province: 'Buenos Aires'! !!SupplierImportTest methodsFor: 'asserting' stamp: 'lukskpoaguanteboca 6/28/2018 20:16'!assert: customer hasAddressAt: streetName number: streetNumber in: town zipCode: zipCode province: province	| address |		address := customer addressAt: streetName ifNone: [ self fail ].	self assert: address streetName equals: streetName.	self assert: address streetNumber equals: streetNumber.	self assert: address town equals: town.	self assert: address zipCode equals: zipCode.	self assert: address province equals: province.	! !!SupplierImportTest methodsFor: 'asserting' stamp: 'lukskpoaguanteboca 6/28/2018 20:16'!assertImportedCustomersSizeIsCorrect	self assert: system allCustomers size equals: 2! !!SupplierImportTest methodsFor: 'importing' stamp: 'lukskpoaguanteboca 6/29/2018 01:25'!importCustomersFrom: inputStream	|recordTypes|	recordTypes := OrderedCollection new.	recordTypes add: (CustomerRecord identifiedWith: 'C').	recordTypes add: (AddressRecord identifiedWith: 'A'). 	(CustomerImporter  from: inputStream using: system withRecords: recordTypes ) import! !!SupplierImportTest methodsFor: 'importing' stamp: 'lukskpoaguanteboca 6/28/2018 21:20'!importSuppliersFrom: inputStream	|recordTypes|	recordTypes := OrderedCollection new.	recordTypes add: (SupplierRecord  identifiedWith: 'S').	recordTypes add: (CustomerRecord identifiedWith: 'NC').	recordTypes add: (ExistingCustomerRecord identifiedWith: 'EC'). 	recordTypes add: (AddressRecord identifiedWith: 'A'). 	(SupplierImporter  from: inputStream using: system withRecords: recordTypes ) import! !CSVImporter subclass: #SupplierImporter	instanceVariableNames: 'newSupplier'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'lukskpoaguanteboca 6/28/2018 21:32'!importSupplier	self assertValidSupplierRecordSize.	newSupplier := Supplier named: record second identifiedWith: record third as:record fourth.	system addSupplier: newSupplier.! !!SupplierImporter methodsFor: 'signalling' stamp: 'lukskpoaguanteboca 6/28/2018 21:30'!signalInvalidSupplierRecord 		self error: self class invalidSupplierRecordErrorDescription ! !!SupplierImporter methodsFor: 'signalling' stamp: 'lukskpoaguanteboca 6/29/2018 01:56'!signalAddressWithoutSupplierError 		self error: self class addressWithoutSupplierErrorDescription   ! !!SupplierImporter methodsFor: 'importing - private - address' stamp: 'lukskpoaguanteboca 6/29/2018 01:53'!importAddress	| newAddress |	self assertThereIsSupplierForAddress.	self assertValidAddressRecordSize.		newAddress := Address new.	newAddress streetName: record second.	newAddress streetNumber: record third asInteger.	newAddress town: record fourth.	newAddress zipCode: record fifth asInteger.	newAddress province: record sixth.	^ newSupplier addAddress: newAddress! !!SupplierImporter methodsFor: 'asserting' stamp: 'lukskpoaguanteboca 6/28/2018 21:29'!assertValidSupplierRecordSize		record size ~= 4 ifTrue: [ self signalInvalidSupplierRecord ].! !!SupplierImporter methodsFor: 'asserting' stamp: 'lukskpoaguanteboca 6/28/2018 20:41'!assertValidExistingCustomerRecordSize		record size ~= 3 ifTrue: [ self signalInvalidCustomerRecord ].! !!SupplierImporter methodsFor: 'asserting' stamp: 'lukskpoaguanteboca 6/29/2018 01:57'!assertThereIsSupplierForAddress	newSupplier isNil ifTrue: [ self signalAddressWithoutSupplierError ].! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'lukskpoaguanteboca 6/28/2018 21:25'!importCustomer	|newCustomer|	self assertValidCustomerRecordSize.	newCustomer := Customer new.	newCustomer firstName: record second.	newCustomer lastName: record third.	newCustomer identificationType: record fourth.	newCustomer identificationNumber: record fifth.	newSupplier addCustomer: newCustomer.	system addCustomer: newCustomer.! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'lukskpoaguanteboca 6/29/2018 01:16'!importExistingCustomer	|customer|	self assertValidExistingCustomerRecordSize.	customer := system customerIdentifiedAs: record second numbered: record third.	newSupplier addCustomer: customer.	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SupplierImporter class	instanceVariableNames: ''!!SupplierImporter class methodsFor: 'as yet unclassified' stamp: 'lukskpoaguanteboca 6/29/2018 01:56'!addressWithoutSupplierErrorDescription		^'There is no Supplier for the imported address'! !!SupplierImporter class methodsFor: 'as yet unclassified' stamp: 'lukskpoaguanteboca 6/28/2018 21:30'!invalidSupplierRecordErrorDescription ^'Supplier invalido'! !Record subclass: #SupplierRecord	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!SupplierRecord methodsFor: 'initialization' stamp: 'lukskpoaguanteboca 6/28/2018 20:11'!importOn: anImporter	^ anImporter importSupplier.! !Object subclass: #System	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!System methodsFor: 'transaction' stamp: 'lukskpoaguanteboca 6/28/2018 20:54'!beginTransaction
	self subclassResponsibility! !!System methodsFor: 'transaction' stamp: 'lukskpoaguanteboca 6/28/2018 20:54'!commit
	self subclassResponsibility! !!System methodsFor: 'testing' stamp: 'lukskpoaguanteboca 6/28/2018 20:59'!identifiedAs: anIdentifycationType numbered: anIdentificationNumber	self subclassResponsibility ! !!System methodsFor: 'testing' stamp: 'lukskpoaguanteboca 6/28/2018 20:59'!isEmpty	self subclassResponsibility ! !!System methodsFor: 'customers' stamp: 'lukskpoaguanteboca 6/28/2018 20:54'!add: aCustomer
	self subclassResponsibility! !!System methodsFor: 'system live cycle' stamp: 'lukskpoaguanteboca 6/28/2018 20:54'!start
	self subclassResponsibility! !!System methodsFor: 'system live cycle' stamp: 'lukskpoaguanteboca 6/28/2018 20:54'!shutdown
	self subclassResponsibility! !System subclass: #CustomerSystem	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!CustomerSystem methodsFor: 'customers' stamp: 'HernanWilkinson 11/4/2016 09:35'!add: aCustomer	self subclassResponsibility! !!CustomerSystem methodsFor: 'customers' stamp: 'lukskpoaguanteboca 6/28/2018 21:00'!identifiedAs: anIdentifycationType numbered: anIdentificationNumber	self subclassResponsibility! !!CustomerSystem methodsFor: 'customers' stamp: 'HernanWilkinson 11/4/2016 09:35'!allCustomers	self subclassResponsibility! !!CustomerSystem methodsFor: 'customers' stamp: 'lukskpoaguanteboca 6/28/2018 21:00'!isEmpty	self subclassResponsibility! !!CustomerSystem methodsFor: 'transaction' stamp: 'HernanWilkinson 11/4/2016 09:35'!beginTransaction	self subclassResponsibility! !!CustomerSystem methodsFor: 'transaction' stamp: 'HernanWilkinson 11/4/2016 09:35'!commit	self subclassResponsibility! !!CustomerSystem methodsFor: 'system live cycle' stamp: 'HernanWilkinson 11/4/2016 09:51'!start	self subclassResponsibility! !!CustomerSystem methodsFor: 'system live cycle' stamp: 'HernanWilkinson 11/4/2016 09:52'!shutdown	self subclassResponsibility! !CustomerSystem subclass: #PersistentCustomerSystem	instanceVariableNames: 'session'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!PersistentCustomerSystem methodsFor: 'initialization' stamp: 'HernanWilkinson 11/3/2016 08:54'!initialize		super initialize.	self initializeSession. ! !!PersistentCustomerSystem methodsFor: 'initialization' stamp: 'HernanWilkinson 11/4/2016 09:19'!initializeSession	session := DataBaseSession		for: (Array with: self addressMapping with: self customerMapping)! !!PersistentCustomerSystem methodsFor: 'transaction' stamp: 'HernanWilkinson 11/4/2016 09:18'!beginTransaction	session beginTransaction! !!PersistentCustomerSystem methodsFor: 'transaction' stamp: 'HernanWilkinson 11/4/2016 09:18'!commit	session commit! !!PersistentCustomerSystem methodsFor: 'system live cycle' stamp: 'HernanWilkinson 11/4/2016 09:51'!start	session start! !!PersistentCustomerSystem methodsFor: 'system live cycle' stamp: 'HernanWilkinson 11/4/2016 09:52'!shutdown	session shutdown! !!PersistentCustomerSystem methodsFor: 'mapping' stamp: 'HernanWilkinson 11/3/2016 08:52'!addressMapping	^ ClassMapping		withDefaultTableNameFor: Address		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #streetName)				with: (EmbededMapping withDefaultFieldNameFor: #streetNumber)				with: (EmbededMapping withDefaultFieldNameFor: #town)				with: (EmbededMapping withDefaultFieldNameFor: #zipCode)				with: (EmbededMapping withDefaultFieldNameFor: #province))! !!PersistentCustomerSystem methodsFor: 'mapping' stamp: 'HernanWilkinson 11/3/2016 08:52'!customerMapping	^ ClassMapping		withDefaultTableNameFor: Customer		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #firstName)				with: (EmbededMapping withDefaultFieldNameFor: #lastName)				with: (EmbededMapping withDefaultFieldNameFor: #identificationType)				with: (EmbededMapping withDefaultFieldNameFor: #identificationNumber)				with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address))! !!PersistentCustomerSystem methodsFor: 'customers' stamp: 'HernanWilkinson 11/4/2016 09:33'!add: aCustomer	session persist: aCustomer! !!PersistentCustomerSystem methodsFor: 'customers' stamp: 'lukskpoaguanteboca 6/28/2018 21:00'!identifiedAs: anIdentifycationType numbered: anIdentificationNumber	| customers |	customers := session		select: [ :aCustomer | 			aCustomer identificationType = anIdentifycationType				and: [ aCustomer identificationNumber = anIdentificationNumber ] ]		ofType: Customer.	customers size = 1		ifFalse: [ self error: 'No o more that one customer found' ].	^ customers anyOne! !!PersistentCustomerSystem methodsFor: 'customers' stamp: 'HernanWilkinson 11/4/2016 09:18'!allCustomers	^ session selectAllOfType: Customer! !!PersistentCustomerSystem methodsFor: 'customers' stamp: 'lukskpoaguanteboca 6/28/2018 21:00'!isEmpty	^ self allCustomers isEmpty! !System subclass: #SupplierSystem	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!SupplierSystem methodsFor: 'transaction' stamp: 'lukskpoaguanteboca 6/28/2018 20:56'!beginTransaction	self subclassResponsibility! !!SupplierSystem methodsFor: 'transaction' stamp: 'lukskpoaguanteboca 6/28/2018 20:56'!commit	self subclassResponsibility! !!SupplierSystem methodsFor: 'system live cycle' stamp: 'lukskpoaguanteboca 6/28/2018 20:56'!start	self subclassResponsibility! !!SupplierSystem methodsFor: 'system live cycle' stamp: 'lukskpoaguanteboca 6/28/2018 20:56'!shutdown	self subclassResponsibility! !!SupplierSystem methodsFor: 'customers' stamp: 'lukskpoaguanteboca 6/28/2018 20:56'!add: aCustomer	self subclassResponsibility! !!SupplierSystem methodsFor: 'customers' stamp: 'lukskpoaguanteboca 6/28/2018 21:00'!identifiedAs: anIdentifycationType numbered: anIdentificationNumber	self subclassResponsibility! !!SupplierSystem methodsFor: 'customers' stamp: 'lukskpoaguanteboca 6/28/2018 20:57'!allSuppliers	self subclassResponsibility! !!SupplierSystem methodsFor: 'customers' stamp: 'lukskpoaguanteboca 6/28/2018 21:00'!isEmpty	self subclassResponsibility! !SupplierSystem subclass: #PersistentSupplierSystem	instanceVariableNames: 'session'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!PersistentSupplierSystem methodsFor: 'transaction' stamp: 'lukskpoaguanteboca 6/28/2018 21:03'!beginTransaction	session beginTransaction! !!PersistentSupplierSystem methodsFor: 'transaction' stamp: 'lukskpoaguanteboca 6/28/2018 21:03'!commit	session commit! !!PersistentSupplierSystem methodsFor: 'initialization' stamp: 'lukskpoaguanteboca 6/28/2018 21:03'!initialize		super initialize.	self initializeSession. ! !!PersistentSupplierSystem methodsFor: 'initialization' stamp: 'lukskpoaguanteboca 6/28/2018 21:06'!initializeSession	session := DataBaseSession		for: (Array with: self addressMapping with: self customerMapping with: self supplierMapping )! !!PersistentSupplierSystem methodsFor: 'mapping' stamp: 'lukskpoaguanteboca 6/28/2018 21:03'!addressMapping	^ ClassMapping		withDefaultTableNameFor: Address		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #streetName)				with: (EmbededMapping withDefaultFieldNameFor: #streetNumber)				with: (EmbededMapping withDefaultFieldNameFor: #town)				with: (EmbededMapping withDefaultFieldNameFor: #zipCode)				with: (EmbededMapping withDefaultFieldNameFor: #province))! !!PersistentSupplierSystem methodsFor: 'mapping' stamp: 'lukskpoaguanteboca 6/28/2018 21:05'!supplierMapping	^ ClassMapping		withDefaultTableNameFor: Customer		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #firstName)				with: (EmbededMapping withDefaultFieldNameFor: #lastName)				with: (EmbededMapping withDefaultFieldNameFor: #identificationType)				with: (EmbededMapping withDefaultFieldNameFor: #identificationNumber)				with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address))! !!PersistentSupplierSystem methodsFor: 'mapping' stamp: 'lukskpoaguanteboca 6/28/2018 21:06'!customerMapping	^ ClassMapping		withDefaultTableNameFor: Customer		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #firstName)				with: (EmbededMapping withDefaultFieldNameFor: #lastName)				with: (EmbededMapping withDefaultFieldNameFor: #identificationType)				with: (EmbededMapping withDefaultFieldNameFor: #identificationNumber)				with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address))! !!PersistentSupplierSystem methodsFor: 'system live cycle' stamp: 'lukskpoaguanteboca 6/28/2018 21:03'!start	session start! !!PersistentSupplierSystem methodsFor: 'system live cycle' stamp: 'lukskpoaguanteboca 6/28/2018 21:03'!shutdown	session shutdown! !!PersistentSupplierSystem methodsFor: 'customers' stamp: 'lukskpoaguanteboca 6/29/2018 01:08'!add: aSupplier	session persist: aSupplier! !!PersistentSupplierSystem methodsFor: 'customers' stamp: 'lukskpoaguanteboca 6/28/2018 21:07'!identifiedAs: anIdentifycationType numbered: anIdentificationNumber	| suppliers |	suppliers := session		select: [ :aSupplier | 			aSupplier identificationType = anIdentifycationType				and: [ aSupplier identificationNumber = anIdentificationNumber ] ]		ofType: Supplier.	suppliers size = 1		ifFalse: [ self error: 'No o more that one supplier found' ].	^ suppliers anyOne! !!PersistentSupplierSystem methodsFor: 'customers' stamp: 'lukskpoaguanteboca 6/28/2018 21:03'!allCustomers	^ session selectAllOfType: Customer! !!PersistentSupplierSystem methodsFor: 'customers' stamp: 'lukskpoaguanteboca 6/28/2018 21:04'!allSuppliers	^ session selectAllOfType: Supplier! !!PersistentSupplierSystem methodsFor: 'customers' stamp: 'lukskpoaguanteboca 6/28/2018 21:05'!isEmpty	^ self allSuppliers  isEmpty! !Object subclass: #TestCaseFactory	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!TestCaseFactory methodsFor: 'as yet unclassified' stamp: 'lukskpoaguanteboca 6/29/2018 02:19'!alwaysImportedSupplierIdType	^ 'D'! !!TestCaseFactory methodsFor: 'as yet unclassified' stamp: 'lukskpoaguanteboca 6/29/2018 02:19'!alwaysImportedSupplierIdNumber	^ '123'! !!TestCaseFactory methodsFor: 'as yet unclassified' stamp: 'lukskpoaguanteboca 6/29/2018 02:20'!validSupplierTestData	^ ReadStream on: 'S,Vandalay Industries,',self alwaysImportedSupplierIdType ,',',self alwaysImportedSupplierIdNumber,'NC,George,Costanza,', self customerImportedBySupplierIdType, ',', self customerImportedBySupplierIdNumber ,',EC,D,22333444A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos Aires'! !!TestCaseFactory methodsFor: 'as yet unclassified' stamp: 'lukskpoaguanteboca 6/29/2018 01:22'!validCustomerTestData	^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos AiresC,Juan,Perez,C,23-25666777-9A,Alem,1122,CABA,1001,CABA'! !!TestCaseFactory methodsFor: 'test data - customer' stamp: 'lukskpoaguanteboca 6/29/2018 01:42'!customerImportedBySupplierIdNumber	^ '12345678'! !!TestCaseFactory methodsFor: 'test data - customer' stamp: 'lukskpoaguanteboca 6/29/2018 01:41'!customerImportedBySupplierIdType	^ 'D'! !!TestCaseFactory methodsFor: 'test data - customer' stamp: 'lukskpoaguanteboca 6/29/2018 01:24'!alwaysImportedCustomerIdNumber	^ '22333444'! !!TestCaseFactory methodsFor: 'test data - customer' stamp: 'lukskpoaguanteboca 6/29/2018 01:23'!alwaysImportedCustomerRecord	^ 'C,Pepe,Sanchez,', self alwaysImportedCustomerIdType, ',', self alwaysImportedCustomerIdNumber ! !!TestCaseFactory methodsFor: 'test data - customer' stamp: 'lukskpoaguanteboca 6/29/2018 01:24'!alwaysImportedCustomerIdType	^ 'D'! !CustomerSystem subclass: #TransientCustomerSystem	instanceVariableNames: 'customers'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!TransientCustomerSystem methodsFor: 'customers' stamp: 'HernanWilkinson 11/4/2016 09:39'!add: aCustomer	customers add: aCustomer! !!TransientCustomerSystem methodsFor: 'customers' stamp: 'lukskpoaguanteboca 6/28/2018 21:00'!identifiedAs: anIdentifycationType numbered: anIdentificationNumber		^customers detect: [ :aCustomer | aCustomer isIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber ]! !!TransientCustomerSystem methodsFor: 'customers' stamp: 'HernanWilkinson 11/4/2016 09:39'!allCustomers	^ customers copy! !!TransientCustomerSystem methodsFor: 'customers' stamp: 'lukskpoaguanteboca 6/28/2018 21:00'!isEmpty	^ customers isEmpty ! !!TransientCustomerSystem methodsFor: 'initialization' stamp: 'HernanWilkinson 11/4/2016 09:41'!initialize		customers := OrderedCollection new! !!TransientCustomerSystem methodsFor: 'system live cycle' stamp: 'HernanWilkinson 11/4/2016 09:51'!start	! !!TransientCustomerSystem methodsFor: 'system live cycle' stamp: 'HernanWilkinson 11/4/2016 09:52'!shutdown		! !!TransientCustomerSystem methodsFor: 'transaction' stamp: 'HernanWilkinson 11/4/2016 09:39'!beginTransaction		! !!TransientCustomerSystem methodsFor: 'transaction' stamp: 'HernanWilkinson 11/4/2016 09:39'!commit		! !ERPSystem subclass: #TransientERPSystem	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!TransientERPSystem methodsFor: 'accessing' stamp: 'lukskpoaguanteboca 6/29/2018 02:25'!commit! !!TransientERPSystem methodsFor: 'accessing' stamp: 'lukskpoaguanteboca 6/28/2018 21:39'!beginTransaction! !!TransientERPSystem methodsFor: 'accessing' stamp: 'lukskpoaguanteboca 6/28/2018 21:38'!start! !!TransientERPSystem methodsFor: 'accessing' stamp: 'lukskpoaguanteboca 6/29/2018 02:26'!shutdown! !!TransientERPSystem methodsFor: 'accessing' stamp: 'lukskpoaguanteboca 6/29/2018 01:04'!initialize	supplierSystem := TransientSupplierSystem new.	customerSystem  :=  TransientCustomerSystem new.! !SupplierSystem subclass: #TransientSupplierSystem	instanceVariableNames: 'suppliers'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!TransientSupplierSystem methodsFor: 'transaction' stamp: 'lukskpoaguanteboca 6/28/2018 21:01'!beginTransaction		! !!TransientSupplierSystem methodsFor: 'transaction' stamp: 'lukskpoaguanteboca 6/28/2018 21:01'!commit		! !!TransientSupplierSystem methodsFor: 'customers' stamp: 'lukskpoaguanteboca 6/29/2018 01:08'!add: aSupplier	suppliers add: aSupplier! !!TransientSupplierSystem methodsFor: 'customers' stamp: 'lukskpoaguanteboca 6/28/2018 21:02'!identifiedAs: anIdentifycationType numbered: anIdentificationNumber		^suppliers detect: [ :aSupplier | aSupplier isIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber ]! !!TransientSupplierSystem methodsFor: 'customers' stamp: 'lukskpoaguanteboca 6/28/2018 21:03'!allSuppliers	^ suppliers copy! !!TransientSupplierSystem methodsFor: 'customers' stamp: 'lukskpoaguanteboca 6/28/2018 21:02'!isEmpty	^ suppliers isEmpty ! !!TransientSupplierSystem methodsFor: 'initialization' stamp: 'lukskpoaguanteboca 6/28/2018 21:03'!initialize		suppliers := OrderedCollection new! !!TransientSupplierSystem methodsFor: 'system live cycle' stamp: 'lukskpoaguanteboca 6/28/2018 21:01'!start	! !!TransientSupplierSystem methodsFor: 'system live cycle' stamp: 'lukskpoaguanteboca 6/28/2018 21:01'!shutdown		! !Object subclass: #ClassMapping	instanceVariableNames: 'mappedClass mappings tableName'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-PersistanceModel'!!ClassMapping methodsFor: 'mapping - private' stamp: 'HernanWilkinson 11/1/2016 00:40'!mapOneToManyRelationshipsOf: anObject using: aDataBaseSession	mappings do: [ :aMapping | aMapping mapOneToManyRelationshipsOf: anObject using: aDataBaseSession ]! !!ClassMapping methodsFor: 'mapping - private' stamp: 'HernanWilkinson 11/1/2016 00:43'!unmap: aRecord into: unMappedObject using: aDataBaseSession	mappings do: [ :aMapping | aMapping unmap: aRecord into: unMappedObject using: aDataBaseSession ]! !!ClassMapping methodsFor: 'mapping - private' stamp: 'HernanWilkinson 11/1/2016 00:43'!unmapIdOf: aRecord into: unMappedObject	unMappedObject instVarNamed: #id put: (aRecord at: #id)! !!ClassMapping methodsFor: 'mapping - private' stamp: 'HernanWilkinson 11/1/2016 00:40'!mapIdOf: anObject into: record using: aDataBaseSession	| newId |	newId := aDataBaseSession newIdFor: anObject.	anObject instVarNamed: #id put: newId.	record at: #id put: newId! !!ClassMapping methodsFor: 'mapping - private' stamp: 'HernanWilkinson 11/1/2016 00:40'!mapEmbededOf: anObject into: record	mappings do: [ :aMapping | aMapping embeded: anObject into: record ]! !!ClassMapping methodsFor: 'mapping' stamp: 'HernanWilkinson 11/1/2016 00:40'!map: anObject using: aDataBaseSession	| record |	self toDo: 'se puede optimizar usando array para registros y guardando definicion de tabla una vez'.	record := Dictionary new.		self mapIdOf: anObject into: record using: aDataBaseSession.	self mapEmbededOf: anObject into: record.	"agrego aca el registro y no luego de mapear el id para que lo agrege completo. Lo agrego antes de mapear las rel one to many 	porque si usuara una db de verdad habria foreign key constrain"	aDataBaseSession add: record on: self tableName.	self mapOneToManyRelationshipsOf: anObject using: aDataBaseSession! !!ClassMapping methodsFor: 'mapping' stamp: 'HernanWilkinson 11/1/2016 00:42'!unmap: aRecord using: aDataBaseSession	| unMappedObject |	unMappedObject := mappedClass basicNew.	self unmapIdOf: aRecord into: unMappedObject.	self unmap: aRecord into: unMappedObject using: aDataBaseSession.	^ unMappedObject! !!ClassMapping methodsFor: 'testing' stamp: 'HernanWilkinson 10/31/2016 23:02'!isFor: aClass	^mappedClass = aClass! !!ClassMapping methodsFor: 'initialization' stamp: 'HernanWilkinson 10/31/2016 23:25'!initializeFor: aClass into: aTableName mappingAll: aCollectionOfMappings	mappedClass := aClass.	tableName := aTableName.	mappings := aCollectionOfMappings ! !!ClassMapping methodsFor: 'table' stamp: 'HernanWilkinson 10/31/2016 23:25'!tableName		^tableName ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ClassMapping class	instanceVariableNames: ''!!ClassMapping class methodsFor: 'instance creation' stamp: 'HernanWilkinson 10/31/2016 23:24'!for: aClass into: aTableName mappingAll: aCollectionOfMappings	self assertValidTableName: aTableName.	self assertHasIdInstanceVariable: aClass.	self assertValidMappings: aCollectionOfMappings for: aClass.		^self new initializeFor: aClass into: aTableName mappingAll: aCollectionOfMappings		! !!ClassMapping class methodsFor: 'instance creation' stamp: 'HernanWilkinson 10/31/2016 23:23'!withDefaultTableNameFor: aClass mappingAll: aCollectionOfMappings	^self for: aClass into: (self defaultTableNameFor: aClass) mappingAll: aCollectionOfMappings		! !!ClassMapping class methodsFor: 'instance creation' stamp: 'HernanWilkinson 11/1/2016 00:44'!defaultTableNameFor: aClass		^aClass name asString! !!ClassMapping class methodsFor: 'assertions' stamp: 'HernanWilkinson 10/31/2016 23:41'!assertValidTableName: aTableName	aTableName trimBoth isEmpty ifTrue: [ self error: 'Table name can not be empty' ]! !!ClassMapping class methodsFor: 'assertions' stamp: 'HernanWilkinson 10/31/2016 21:15'!assertHasIdInstanceVariable: aClass 		(aClass hasInstVarNamed: #id) ifFalse: [ self error: ('<1s> has no id instance variable' expandMacrosWith: aClass name) ]! !!ClassMapping class methodsFor: 'assertions' stamp: 'HernanWilkinson 10/31/2016 19:26'!assertValidMappings: aCollectionOfMappings for: aClass 	self toDo: 'Lo mejor seria recolectar todos los erroes de mapeo y no parar en el primero'.	aCollectionOfMappings do: [ :aMapping | aMapping assertIsValidFor: aClass ]	! !Object subclass: #DataBaseSession	instanceVariableNames: 'configuration tables id cache'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-PersistanceModel'!!DataBaseSession methodsFor: 'id' stamp: 'HernanWilkinson 11/1/2016 01:04'!recordId: aRecord	^aRecord at: #id! !!DataBaseSession methodsFor: 'id' stamp: 'HernanWilkinson 11/1/2016 01:00'!idOf: anObject	^anObject instVarNamed: #id! !!DataBaseSession methodsFor: 'id' stamp: 'HernanWilkinson 10/28/2016 16:35'!newIdFor: anObject	id := id + 1.	^id! !!DataBaseSession methodsFor: 'persistence - private' stamp: 'HernanWilkinson 10/28/2016 16:35'!defineIdOf: anObject	anObject instVarNamed: 'id' put: (self newIdFor: anObject).! !!DataBaseSession methodsFor: 'persistence - private' stamp: 'HernanWilkinson 10/28/2016 16:41'!delay	(Delay forMilliseconds: 100) wait! !!DataBaseSession methodsFor: 'adding - private' stamp: 'HernanWilkinson 11/1/2016 01:00'!signalRelationAlreadyExistBetween: anOwner and: aRelated 	self error: ('Relation between id <1s> of type <2s> and id <3s> of type <4s> already exist'		expandMacrosWith: (self idOf: anOwner) printString		with: anOwner class name		with: (self idOf: aRelated) printString		with: aRelated class name)! !!DataBaseSession methodsFor: 'adding - private' stamp: 'HernanWilkinson 11/1/2016 01:27'!addToCache: anObject 	cache at: (self idOf: anObject) put: anObject ! !!DataBaseSession methodsFor: 'adding - private' stamp: 'HernanWilkinson 11/1/2016 01:03'!addRelated: aRelated ownedBy: anOwner	| relatedIds relatedId |	relatedIds := self relatedIdsOwnedBy: anOwner forType: aRelated class.	relatedId := aRelated instVarNamed: #id.	self assertRelationOwnedBy: anOwner isUniqueFor: aRelated identifiedAs: relatedId in: relatedIds.		relatedIds add: relatedId! !!DataBaseSession methodsFor: 'adding - private' stamp: 'HernanWilkinson 11/1/2016 01:06'!relatedIdOwnedBy: anOwner on: table	^ table at: (self idOf: anOwner) ifAbsentPut: [ Set new ]! !!DataBaseSession methodsFor: 'adding - private' stamp: 'HernanWilkinson 11/1/2016 01:03'!add: aRecord on: aTableName	| table existingRecord |	table := self tableNamed: aTableName.	existingRecord := table at: (self recordId: aRecord) ifAbsentPut: [ aRecord ].	existingRecord == aRecord ifFalse: [ self error: 'Duplicated primary key' ]! !!DataBaseSession methodsFor: 'adding - private' stamp: 'HernanWilkinson 11/1/2016 01:05'!assertRelationOwnedBy: anOwner isUniqueFor: aRelated identifiedAs: relatedId in: relatedIds	(relatedIds includes: relatedId) ifTrue: [ self signalRelationAlreadyExistBetween: anOwner and: aRelated ]! !!DataBaseSession methodsFor: 'adding - private' stamp: 'HernanWilkinson 11/1/2016 01:10'!relatedIdsOwnedBy: anOwner forType: aRelatedClass	| relatedIds table |	table := self relationTableFor: anOwner class relatedTo: aRelatedClass.	relatedIds := self relatedIdOwnedBy: anOwner on: table.		^ relatedIds! !!DataBaseSession methodsFor: 'mapping - private' stamp: 'HernanWilkinson 11/1/2016 01:14'!mapperFor: aClass	self toDo: 'se puede mejorar performanco usando un dictionary'.	^configuration		detect: [ :aClassMapper | aClassMapper isFor: aClass ] 		ifNone: [ self error: ('There is no mapper for <1s>' expandMacrosWith: aClass name) ]! !!DataBaseSession methodsFor: 'mapping - private' stamp: 'HernanWilkinson 11/1/2016 01:15'!relatedOfType: aRelatedClass for: anOwner	| table relatedIds |		table := self relationTableFor: anOwner class relatedTo: aRelatedClass.	relatedIds := table at: (self idOf: anOwner) ifAbsent: [ ^#() ].		^relatedIds collect: [ :aRelatedId | self objectIdentifiedAs: aRelatedId ofType: aRelatedClass ]		! !!DataBaseSession methodsFor: 'mapping - private' stamp: 'HernanWilkinson 11/1/2016 01:16'!unmapRecordIdentifiedAs: anId ofType: aClass	| record table mapper |	mapper := self mapperFor: aClass.	table := self tableNamed: mapper tableName.	record := table at: id ifAbsent: [ self error: ('Object identified as <1s> does not exist' expandMacrosWith: anId printString) ].		^ mapper unmap: record using: self! !!DataBaseSession methodsFor: 'initialization' stamp: 'HernanWilkinson 10/31/2016 22:55'!initializeFor: aConfiguration	configuration := aConfiguration.	id := 0.	tables := nil.	cache := nil.! !!DataBaseSession methodsFor: 'selecting' stamp: 'HernanWilkinson 10/31/2016 22:17'!selectAllOfType: aClass 		^self select: [ :anObject | true ] ofType: aClass! !!DataBaseSession methodsFor: 'selecting' stamp: 'HernanWilkinson 11/1/2016 01:26'!select: aCondition ofType: aClass	| mapper table |	self assertInTransaction.	self delay.		mapper := self mapperFor: aClass.	table := tables at: mapper tableName ifAbsent: [ ^ #() ].		^ table inject: OrderedCollection new into: [ :selected :record | self addInto: selected theOnesThatHold: aCondition unmapping: record with: mapper ]! !!DataBaseSession methodsFor: 'selecting' stamp: 'HernanWilkinson 11/1/2016 01:15'!objectIdentifiedAs: anId ofType: aClass	self assertInTransaction.	self delay.		^ cache at: anId ifAbsentPut: [ self unmapRecordIdentifiedAs: anId ofType: aClass ]! !!DataBaseSession methodsFor: 'tables - private' stamp: 'HernanWilkinson 11/1/2016 00:48'!tableNamed: aTableName	^ tables at: aTableName ifAbsentPut: [ Dictionary new ]! !!DataBaseSession methodsFor: 'tables - private' stamp: 'HernanWilkinson 11/1/2016 01:12'!relationTableNameOwnedBy: anOwnerClass relatedTo: aRelatedClass	| ownerClassMapper relatedClassMapper |		ownerClassMapper := self mapperFor: anOwnerClass.	relatedClassMapper := self mapperFor: aRelatedClass.		^ownerClassMapper tableName,'_', relatedClassMapper tableName asPlural.! !!DataBaseSession methodsFor: 'tables - private' stamp: 'HernanWilkinson 11/1/2016 01:12'!relationTableFor: anOwnerClass relatedTo: aRelatedClass	| relationTableName table |	relationTableName := self relationTableNameOwnedBy: anOwnerClass relatedTo: aRelatedClass.	table := self tableNamed: relationTableName.		^ table! !!DataBaseSession methodsFor: 'open/close' stamp: 'HernanWilkinson 10/31/2016 18:36'!assertIsOpen		tables isNil ifTrue: [ self error: 'Session must be open to colaborate with it' ]! !!DataBaseSession methodsFor: 'open/close' stamp: 'HernanWilkinson 11/4/2016 09:51'!start	self assertIsClose.		tables := Dictionary new.	! !!DataBaseSession methodsFor: 'open/close' stamp: 'HernanWilkinson 10/31/2016 18:37'!assertIsClose		tables isNil ifFalse: [ self error: 'Session must be close' ]! !!DataBaseSession methodsFor: 'open/close' stamp: 'HernanWilkinson 11/4/2016 09:52'!shutdown	self assertIsOpen.		tables := nil! !!DataBaseSession methodsFor: 'persistance' stamp: 'HernanWilkinson 11/1/2016 01:28'!persist: anObject	| mapper |		self assertInTransaction.	self delay.		mapper := self mapperFor: anObject class.	mapper map: anObject using: self.		self addToCache: anObject ! !!DataBaseSession methodsFor: 'transaction management' stamp: 'HernanWilkinson 10/31/2016 22:57'!commit		self assertInTransaction.		cache := nil! !!DataBaseSession methodsFor: 'transaction management' stamp: 'HernanWilkinson 10/31/2016 22:55'!assertNotInTransasction		cache notNil ifTrue: [ self error: 'There is an open transaction already' ]! !!DataBaseSession methodsFor: 'transaction management' stamp: 'HernanWilkinson 10/31/2016 22:55'!assertInTransaction		cache isNil ifTrue: [ self error: 'There is no transaction currently' ]! !!DataBaseSession methodsFor: 'transaction management' stamp: 'HernanWilkinson 10/31/2016 22:57'!beginTransaction	self assertIsOpen.	self assertNotInTransasction.		cache := WeakKeyDictionary new.	! !!DataBaseSession methodsFor: 'selecting - private' stamp: 'HernanWilkinson 11/1/2016 01:28'!addInto: selected theOnesThatHold: aCondition unmapping: record with: mapper	| recordId aClassInstance |	recordId := self recordId: record.	aClassInstance := cache at: recordId ifAbsent: [ mapper unmap: record using: self ].	(aCondition value: aClassInstance) ifTrue: [ 		self addToCache: aClassInstance.		selected add: aClassInstance ].		^ selected! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DataBaseSession class	instanceVariableNames: ''!!DataBaseSession class methodsFor: 'instance creation' stamp: 'HernanWilkinson 10/28/2016 13:07'!for: aConfiguration	^self new initializeFor: aConfiguration! !Object subclass: #Mapping	instanceVariableNames: 'instanceVariableName'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-PersistanceModel'!!Mapping methodsFor: 'assertions' stamp: 'HernanWilkinson 11/1/2016 01:31'!assertIsValidFor: aClass 	(aClass hasInstVarNamed: instanceVariableName) ifFalse: [ 		self error: ('Invalid mapping for <1s> in class <2s>' expandMacrosWith: instanceVariableName with: aClass name) ] ! !!Mapping methodsFor: 'mapping' stamp: 'HernanWilkinson 10/31/2016 23:26'!embeded: anObject into: aRecord	self subclassResponsibility! !!Mapping methodsFor: 'mapping' stamp: 'HernanWilkinson 10/31/2016 23:26'!unmap: aRecord into: anObject using: aDataBaseSession	self subclassResponsibility! !!Mapping methodsFor: 'mapping' stamp: 'HernanWilkinson 10/31/2016 23:26'!mapOneToManyRelationshipsOf: anObject using: aDataBaseSession	self subclassResponsibility! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Mapping class	instanceVariableNames: ''!!Mapping class methodsFor: 'assertions' stamp: 'HernanWilkinson 10/31/2016 23:41'!assertValidFieldName: aFieldName	aFieldName trimBoth isEmpty ifTrue: [ self error: 'Field name can not be empty' ]! !!Mapping class methodsFor: 'instance creation' stamp: 'HernanWilkinson 11/1/2016 01:32'!defaultFieldNameFor: anInstanceVariableName	^anInstanceVariableName asString! !Mapping subclass: #EmbededMapping	instanceVariableNames: 'fieldName'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-PersistanceModel'!!EmbededMapping methodsFor: 'initialization' stamp: 'HernanWilkinson 10/31/2016 23:30'!initializeFor: anInstanceVariableName into: aFieldName	instanceVariableName := anInstanceVariableName.	fieldName := aFieldName ! !!EmbededMapping methodsFor: 'mapping' stamp: 'HernanWilkinson 10/31/2016 23:31'!embeded: anObject into: aRecord	aRecord at: fieldName put: (anObject instVarNamed: instanceVariableName) ! !!EmbededMapping methodsFor: 'mapping' stamp: 'HernanWilkinson 10/31/2016 23:31'!unmap: aRecord into: anObject using: aDataBaseSession 	anObject instVarNamed: instanceVariableName put: (aRecord at: fieldName)! !!EmbededMapping methodsFor: 'mapping' stamp: 'HernanWilkinson 10/31/2016 21:23'!mapOneToManyRelationshipsOf: anObject using: aDataBaseSession 		! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EmbededMapping class	instanceVariableNames: ''!!EmbededMapping class methodsFor: 'instance creation' stamp: 'HernanWilkinson 10/31/2016 23:30'!for: anInstanceVariableName into: aFieldName	^self new initializeFor: anInstanceVariableName into: aFieldName ! !!EmbededMapping class methodsFor: 'instance creation' stamp: 'HernanWilkinson 10/31/2016 23:29'!withDefaultFieldNameFor: anInstanceVariableName	^self for: anInstanceVariableName into: (self defaultFieldNameFor: anInstanceVariableName)! !Mapping subclass: #OneToManyMapping	instanceVariableNames: 'relatedType fieldName'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-PersistanceModel'!!OneToManyMapping methodsFor: 'mapping' stamp: 'HernanWilkinson 10/31/2016 21:16'!embeded: anObject into: aRecord	! !!OneToManyMapping methodsFor: 'mapping' stamp: 'HernanWilkinson 11/1/2016 01:35'!createRelationCollectionOn: aDataBaseSession ownedBy: anObject	^ OneToManySet on: aDataBaseSession ownedBy: anObject! !!OneToManyMapping methodsFor: 'mapping' stamp: 'HernanWilkinson 11/1/2016 01:37'!mapOneToManyRelationshipsOf: anObject using: aDataBaseSession	| oldCollection newCollection |	newCollection := self createRelationCollectionOn: aDataBaseSession ownedBy: anObject.	oldCollection := anObject instVarNamed: instanceVariableName.		newCollection addAll: oldCollection.	anObject instVarNamed: instanceVariableName put: newCollection! !!OneToManyMapping methodsFor: 'mapping' stamp: 'HernanWilkinson 11/1/2016 01:37'!unmap: aRecord into: anObject using: aDataBaseSession	| newCollection related |	related := aDataBaseSession relatedOfType: relatedType for: anObject.	newCollection := self createRelationCollectionOn: aDataBaseSession ownedBy: anObject.	newCollection addAllNotPersisting: related.	anObject instVarNamed: instanceVariableName put: newCollection! !!OneToManyMapping methodsFor: 'initialization' stamp: 'HernanWilkinson 10/31/2016 23:34'!initializeFor: anInstanceVariableName into: aFieldName ofType: aClass	instanceVariableName := anInstanceVariableName.	fieldName := aFieldName.	relatedType := aClass ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!OneToManyMapping class	instanceVariableNames: ''!!OneToManyMapping class methodsFor: 'instance creation' stamp: 'HernanWilkinson 10/31/2016 23:32'!withDefaultFieldNameFor: anInstanceVariableName ofType: aClass	^self for: anInstanceVariableName into: (self defaultFieldNameFor: anInstanceVariableName) ofType: aClass! !!OneToManyMapping class methodsFor: 'instance creation' stamp: 'HernanWilkinson 10/31/2016 23:40'!for: anInstanceVariableName into: aFieldName ofType: aClass	self assertValidFieldName: aFieldName.		^self new initializeFor: anInstanceVariableName into: aFieldName ofType: aClass! !Set subclass: #OneToManySet	instanceVariableNames: 'session owner'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-PersistanceModel'!!OneToManySet methodsFor: 'initialization' stamp: 'HernanWilkinson 11/1/2016 00:11'!initializeOn: aDataBaseSession ownedBy: anOwner		session := aDataBaseSession.	owner := anOwner ! !!OneToManySet methodsFor: 'adding' stamp: 'HernanWilkinson 11/1/2016 00:03'!addAllNotPersisting: aCollection 		^aCollection do: [ :anObjectToAdd | super add: anObjectToAdd ]! !!OneToManySet methodsFor: 'adding' stamp: 'HernanWilkinson 11/1/2016 00:11'!add: anObject	session persist: anObject.	session addRelated: anObject ownedBy: owner.		super add: anObject.! !!OneToManySet methodsFor: 'removing' stamp: 'HernanWilkinson 10/31/2016 21:35'!remove: anObject ifAbsent: anAbsentBlock	self shouldBeImplemented ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!OneToManySet class	instanceVariableNames: ''!!OneToManySet class methodsFor: 'instance creation' stamp: 'HernanWilkinson 11/1/2016 00:11'!on: aDataBaseSession ownedBy: anOwner		^self new initializeOn: aDataBaseSession ownedBy: anOwner ! !'From Pharo6.0 of 13 May 2016 [Latest update: #60540] on 29 June 2018 at 2:26:24.509558 am'!!String methodsFor: '*IS1-CustomerImport' stamp: 'HernanWilkinson 10/31/2016 23:57'!asPlural		^self last = $s 		ifTrue: [ self, 'es' ]		ifFalse: [ self, 's' ]! !'From Pharo6.0 of 13 May 2016 [Latest update: #60540] on 29 June 2018 at 2:26:24.510141 am'!!Object methodsFor: '*IS1-CustomerImport' stamp: 'HernanWilkinson 10/31/2016 19:27'!toDo: aString 	! !